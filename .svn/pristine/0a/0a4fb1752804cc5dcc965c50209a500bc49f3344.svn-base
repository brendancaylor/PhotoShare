using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using System.Web;
using System.Web.Mvc;
using System.Web.Script.Serialization;
using Microsoft.AspNet.Identity;
using PhotoShare.BusinessLogic;
using PhotoShare.Dto;
using WebApplication.Models;

namespace WebApplication.Controllers
{
    public class PayPalController : Controller
    {
        // GET: PayPal
        public ActionResult TestButton()
        {
            return View();
        }

        public async Task<ActionResult> ipntest(string id)
        {
            GeneralLogic logic = new GeneralLogic();
            var photo = logic.GetMtDbPhotoIncludeByPayPalId(id);

            // they've paid the correct amount
            var sale = new PhotoShare.Dto.MtDbPhotoSale()
            {
                Id = Guid.NewGuid(),
                BuyersEmail = "brendan.caylor@gmail.com",
                DatePaid = DateTime.Now,
                IpnMessage = "test",
                MtDbPhotoId = photo.Id,
                PricePaid = 1,
                SaleCode = GeneralLogic.RandomString(8)
            };
            logic.AddSale(sale);

            EmailService emailService = new EmailService();
            var identityMessage = new IdentityMessage();
            identityMessage.Destination = sale.BuyersEmail;
            var emailBody = string.Format("On behalf of Mi-True Image, thank you for purchasing your photo. You may download your photo using this code {0}  or using this link http://www.mi-photoshare.com/photoshare/Public/ViewCode?viewingcode={0}"
                , sale.SaleCode);
            identityMessage.Body = emailBody;
            identityMessage.Subject = "Mi-True Image purchase";
            await emailService.SendAsync(identityMessage);

            return View();
        }

        public async Task<ActionResult> ipn(PayPalCheckoutInfo payPalCheckoutInfo)
        {
            GeneralLogic logic = new GeneralLogic();

            var mtIpnTestnew = new MtIpnTest()
            {
                Id = Guid.NewGuid(),
                IpnMessage = ""
            };

            PayPalListenerModel model = new PayPalListenerModel();
            model._PayPalCheckoutInfo = payPalCheckoutInfo;
            byte[] parameters = Request.BinaryRead(Request.ContentLength);

            if (parameters != null)
            {
                model.GetStatus(parameters);
            }

            var jsonSerializer = new JavaScriptSerializer();
            var json = jsonSerializer.Serialize(model._PayPalCheckoutInfo);

            if (model.Status == "VERIFIED")
            {

                //check that the payment_status is Completed                 
                if (model._PayPalCheckoutInfo.payment_status.ToLower() == "completed")
                {
                    
                    

                    //check that txn_id has not been previously processed to prevent duplicates                      
                    //check that receiver_email is your Primary PayPal email                                          

                    var photo = new PhotoShare.Dto.MtDbPhoto();

                    try
                    {
                        photo = logic.GetMtDbPhotoIncludeByPayPalId(model._PayPalCheckoutInfo.item_number);
                    }
                    catch (Exception ex)
                    {
                        mtIpnTestnew = new MtIpnTest()
                        {
                            Id = Guid.NewGuid(),
                            IpnMessage = string.Format("Exception :{0}"
                            , ex.Message)
                        };
                        logic.AddMtIpnTest(mtIpnTestnew);

                        photo = null;
                    }

                    

                    if (photo != null)
                    {
                        try
                        {


                            // id equals a valid photo
                            if (photo.MtDbFolder.PricePerPhoto.HasValue
                                && photo.MtDbFolder.PricePerPhoto.Value.ToString() == model._PayPalCheckoutInfo.mc_gross
                                && model._PayPalCheckoutInfo.mc_currency == "GBP"
                                )
                            {

                                mtIpnTestnew.IpnMessage = string.Format("COMPLETED :-) json {0}", json);
                                logic.AddMtIpnTest(mtIpnTestnew);

                                // they've paid the correct amount
                                var sale = new PhotoShare.Dto.MtDbPhotoSale()
                                {
                                    Id = Guid.NewGuid(),
                                    BuyersEmail = model._PayPalCheckoutInfo.payer_email,
                                    DatePaid = DateTime.Now,
                                    IpnMessage = json,
                                    MtDbPhotoId = photo.Id,
                                    PricePaid = photo.MtDbFolder.PricePerPhoto.Value,
                                    SaleCode = GeneralLogic.RandomString(8)
                                };
                                logic.AddSale(sale);
                                EmailService emailService = new EmailService();
                                var identityMessage = new IdentityMessage();
                                identityMessage.Destination = sale.BuyersEmail;
                                var emailBody = string.Format("On behalf of Mi-True Image, thank you for purchasing your photo. You may download your photo using this code {0}  or using this link http://www.mi-photoshare.com/photoshare/Public/ViewCode?viewingcode={0}"
                                    , sale.SaleCode);
                                identityMessage.Body = emailBody;
                                identityMessage.Subject = "Mi-True Image purchase";
                                await emailService.SendAsync(identityMessage);

                                mtIpnTestnew = new MtIpnTest()
                                {
                                    Id = Guid.NewGuid(),
                                    IpnMessage = string.Format("Email sent to :{0}", sale.BuyersEmail)
                                };
                                logic.AddMtIpnTest(mtIpnTestnew);
                            }
                            else
                            {

                                mtIpnTestnew = new MtIpnTest()
                                {
                                    Id = Guid.NewGuid(),
                                    IpnMessage = string.Format("PricePerPhoto :{0}, mc_gross: {1}, mc_currency: {2}"
                                        , photo.MtDbFolder.PricePerPhoto.Value
                                        , model._PayPalCheckoutInfo.mc_gross
                                        , model._PayPalCheckoutInfo.mc_currency)
                                };

                                logic.AddMtIpnTest(mtIpnTestnew);
                            }
                        }
                        catch
                            (Exception ex)
                        {
                            mtIpnTestnew = new MtIpnTest()
                            {
                                Id = Guid.NewGuid(),
                                IpnMessage = string.Format("Exception :{0}"
                                    , ex.Message)
                            };
                            logic.AddMtIpnTest(mtIpnTestnew);
                        }
                    }

                    else
                    {
                        mtIpnTestnew = new MtIpnTest()
                        {
                            Id = Guid.NewGuid(),
                            IpnMessage = string.Format("photo is null item_number: {0}",
                            model._PayPalCheckoutInfo.item_number)
                        };
                        logic.AddMtIpnTest(mtIpnTestnew);
                    }

                }
                else if (model.Status == "INVALID")
                {
                    mtIpnTestnew = new MtIpnTest()
                    {
                        Id = Guid.NewGuid(),
                        IpnMessage = string.Format("INVALID! | json {0}", json)
                    };
                    //log for manual investigation
                    logic.AddMtIpnTest(mtIpnTestnew);
                }
                else
                {
                    mtIpnTestnew = new MtIpnTest()
                    {
                        Id = Guid.NewGuid(),
                        IpnMessage = string.Format("SOMETHING ELSE :-( {0} | json {1}", model.Status, json)
                    };

                    //log response/ipn data for manual investigation             
                    logic.AddMtIpnTest(mtIpnTestnew);
                }

            }
            else
            {
                mtIpnTestnew.IpnMessage = string.Format("Not verified! | json {0}", json);
                logic.AddMtIpnTest(mtIpnTestnew);
            }

            return View();
        } 

    }
}