using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using PhotoShare.BusinessLogic;
using PhotoShare.Dto;
using WebApplication.Models;

namespace WebApplication.Controllers
{
    public class PayPalController : Controller
    {
        // GET: PayPal
        public ActionResult TestButton()
        {
            return View();
        }

        public EmptyResult ipn(PayPalCheckoutInfo payPalCheckoutInfo)
        {
            GeneralLogic logic = new GeneralLogic();
            var mtIpnTestnew = new MtIpnTest()
            {
                Id = Guid.NewGuid(),
                IpnMessage = ""
            };
            PayPalListenerModel model = new PayPalListenerModel();
            model._PayPalCheckoutInfo = payPalCheckoutInfo;
            byte[] parameters = Request.BinaryRead(Request.ContentLength);

            if (parameters != null)
            {
                model.GetStatus(parameters);
            }

            if (model.Status == "VERIFIED")
            {
                
                //check that the payment_status is Completed                 
                if (model._PayPalCheckoutInfo.payment_status.ToLower() == "completed")
                {
                    mtIpnTestnew.IpnMessage = string.Format("Completed! | Date {0}", DateTime.Now);
                    //check that txn_id has not been previously processed to prevent duplicates                      

                    //check that receiver_email is your Primary PayPal email                                          

                    //check that payment_amount/payment_currency are correct                       

                    //process payment/refund/etc                     

                }
                else if (model.Status == "INVALID")
                {
                    mtIpnTestnew.IpnMessage = string.Format("INVALID! | Date {0}", DateTime.Now);
                    //log for manual investigation             
                }
                else
                {
                    mtIpnTestnew.IpnMessage = string.Format("{0} | Date {1}", model.Status, DateTime.Now);
                    //log response/ipn data for manual investigation             
                }

            }
            else
            {
                mtIpnTestnew.IpnMessage = string.Format("Not verified! | Date {0}", DateTime.Now);
            }
            logic.AddMtIpnTest(mtIpnTestnew);

            return new EmptyResult();
        } 

    }
}